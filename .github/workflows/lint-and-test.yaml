name: tests
on: [pull_request]

env:
  DOCKER_FILE_DIRECTORY: environments
  DOCKER_COMPOSE_DIRECTORY: environments/ci
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  USE_CACHE: true

jobs:
  lint-and-test:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.image }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version: ["3.10"]
        include:
          - os: ubuntu
            image: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check version info
        run: pwd && docker compose --version && docker --version

      - name: Get UID and GID
        run: |
          echo "UID=$(id -u)" >> $GITHUB_ENV
          echo "GID=$(id -g)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: ${{ env.USE_CACHE == 'true' }}
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        if: ${{ env.USE_CACHE == 'true' }}
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ github.ref }}
            buildx-

      - name: Cache Docker registry
        if: ${{ env.USE_CACHE == 'true' }}
        uses: actions/cache@v3
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            docker-registry-${{ github.ref }}
            docker-registry-

      - name: Boot-up local Docker registry
        if: ${{ env.USE_CACHE == 'true' }}
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2
      
      - name: Wait for the Docker registry to boot
        if: ${{ env.USE_CACHE == 'true' }}
        run: npx wait-on --httpTimeout 30000 tcp:5000

      - name: Generate Docker image tag
        run: |
            SHA=${{ github.sha }}
            TAG=$(TZ=UTC-9 date '+%Y%m')-${SHA:0:7}
            echo "DOCKER_IMAGE_TAG_CI=$TAG" >> $GITHUB_ENV
            echo TAG $TAG
            echo "::set-output name=docker_image_tag_ci::$TAG"

      - name: Build Docker image with cache and push it to the local registry
        if: ${{ env.USE_CACHE == 'true' }}
        run: |
          docker buildx bake \
          --builder="${{ steps.buildx.outputs.name }}" \
          --set="*.args.UID=${{ env.UID }}" \
          --set="*.args.GID=${{ env.GID }}" \
          --set="*.cache-from=type=local,src=/tmp/.buildx-cache" \
          --set="*.cache-to=type=local,dest=/tmp/.buildx-cache-new" \
          --push \
          -f docker-compose.yaml
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Build Docker image if the cache is not used
        if: ${{ env.USE_CACHE != 'true' }}
        run: docker compose build
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Pull Docker image from the local registry
        if: ${{ env.USE_CACHE == 'true' }}
        run: docker compose pull
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Create and start Docker container
        run: docker compose up --no-build -d
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      # pytest-cov export coverage data to a file
      # However, the directory made by actions/checkout does not allow write
      # chmod is needed to resolve above problem
      - name: Change permission
        run: chmod 777 .

      # In the built stage of Docker image, .venv dir is moved from the working directory to prevent
      # from being overwritten by volume operation of Docker. Here, .venv is moved back to working directory.
      - name: Move back the backend .venv directory
        run: docker compose exec -T backend mv ../.venv .
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}
      - name: Move back the frontend .venv directory
        run: docker compose exec -T frontend mv ../.venv .
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Run lint for the backend service
        run: docker compose exec -T backend make lint
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}
      - name: Run lint for the frontend service
        run: docker compose exec -T frontend make lint
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Run test code for the backend service
        run: docker compose exec -T backend make test
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}
      - name: Run test code for the frontend service
        run: docker compose exec -T frontend make test
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Start the backend service
        run: docker compose exec -T backend make run-backend
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}
      - name: Start the frontend service
        run: docker compose exec -T frontend make run-frontend
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Helth check the backend service
        run: docker compose exec -T backend make healthcheck
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        if: ${{ env.USE_CACHE == 'true' }}
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache